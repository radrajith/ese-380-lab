
AVRASM ver. 2.1.52  H:\New folder\duty_freq\duty_freq\duty_freq.asm Wed Oct 08 11:33:19 2014

H:\New folder\duty_freq\duty_freq\duty_freq.asm(22): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.1005\avrassembler\Include\m16def.inc'
                 
                 
                  * duty_cycle_freq.asm
                  ; components used:
                  ; 4 bit nibble DIP switches(2), 7 seg dispaly, 3 leds with 270 ohm resisotr
                  ; 3 pushbuttons
                  ;
                  * This program will read the lower DIP switches and output a PWM signal depending 
                  ; on the BCD number entered using the switch. The MSB will be on the top and LSB 
                  ; on the bottom of the switch. The first pushbutton on top will be utilized for 
                  ; as the load button and led as output, and the duty cycle will be displayed on 
                  ; the 7seg. The upper DIP Switches will be read and affect the frequency
                  ; output 0 for all the values above 9
                  ; 
                  * inputs used: PD4-7(switches), PC 7(PBSW) 
                  * outputs used: PB 0-7(7seg), PA0 (LED)
                  *
                  ;register r20 and 21 used for delay timers
                  ;r18 - to store switch values
                  *   Author: radra_000
                  */ 
                  .list
                 
                  ;equates for delay loop countes
                  .equ outer = $f1					;delays 241 clk cyles
                  .equ inner = $d					;delays 13 clk cycles
                 	
                 //loads the registers and ports required, run and repated when powere up or reset
                 
                 
                 
                  reset:
                 	//initizling the stack pointer
000000 e50f      	ldi r16, LOW(RAMEND)			;load SPL with low byte of
000001 bf0d      	out SPL, r16					;RAMEND adress
000002 e004      	ldi r16, HIGH(RAMEND)			;load SPH with low byte of 
000003 bf0e      	out SPH, r16					;RAMEND adress
000004 ef0f      	ldi r16, $ff					
000005 bb07      	out ddrb, r16
                 //	LDI r16, $00					;load register 16 with 1's
                 //	OUT PORTB, r16					;load the 7seg diplay
                 //	OUT DDRB, r16					;turn on all leds in 7seg
000006 e001      	ldi r16, 1						;load r16 with 1
000007 bb0a      	OUT DDRA, r16					;set up led as output
000008 e70f      	ldi r16, 0b01111111				;set only the first switch
000009 bb04      	out DDRC, r16					;set the pc7 as the input
                 //	ldi	r16, 0b11111111	 
                 //	out DDRD, r16					;set the lower DIP Switch
00000a ef0f      	LDI r16, $ff					;load register 16 with 1's 
00000b bb07      	out ddrb, r16
00000c bb02      	OUT PORTD, r16					;load the pull ups for dip switch
00000d bb05      	OUT PORTC, r16					;load the pull ups for PBSW
00000e e400      	LDI r16, $40					;load register 16 with 0's 
00000f bb08      	OUT PORTB, r16					;output 0 on 7seg
                 
                 //check if the load button is pressed 
                 
                 main_loop:
                 //	ldi r19, 4						;r19 used as counter
000010 999f      	SBIC PINC, 7					;check if the PB switch is pressed
000011 cffe      	rjmp main_loop					;repeat until button is pressed
000012 d03d      	rcall delay						;wait for 10ms(debounce)
000013 9b9f      	SBIS PINC, 7					;check if PB is still pressed
000014 c001      	rjmp read_switch				; jump to read switch
000015 cffa      	rjmp main_loop					;repeat the main loop
                 
                 //read values of switch 
                 read_switch:
000016 b320      	in r18, PIND					;input the switch values to r18
000017 2f92      	mov r25, r18					;copy value from r18 to r25
000018 702f      	andi r18, $0F
                 //	ldi r16, 0						;load with 0 to compare with swtich
000019 3020      	CPI r18, 0						;check weather r18 is 0
00001a f0e9      	BREQ clear						;jump to clear if equal
00001b e006      	ldi r16, 6						;load r16 with 06
00001c 0f02      	add r16,r18						;if there is a 
00001d f0d0      	brcs clear						;output 0 for anything greater than 9
                 	check_1:
00001e 9b9f      	sbis pinc,7
00001f cffe      	rjmp check_1
000020 d009      	rcall hex_7seg					;go to hex7seg and return
000021 d01a      	rcall frequency					;go to frequency and return
                 //	push r25						;store r25 in stack
                 //	push r25
000022 c000      	rjmp duty_pwm					;go to dutypwm and return
                 
                 
                 
                 //output the pwm singal
                 duty_pwm:
                 //	SBIC PINC, 7					;check if load button is pressed
                 //	rjmp main_loop					;if pressed restart and read the value of the 
                 									;switch again
000023 9ad8      	SBI PORTA, 0					;set port a to high
000024 d01a      	rcall delay_on					;turn on the led for cetain period
000025 98d8      	CBI PORTA, 0					;set port a to low
000026 d01f      	rcall delay_off					;turn off the led for certain period
000027 9b9f      	sbis pinc,7
000028 cfe7      	rjmp main_loop
000029 cff9      	rjmp duty_pwm					;output the signal until button press
                 
                 
                 
                 
                 //subroutines
                 //-----------
                 
                 //get r18 to 4 digits from 8 digits 
                 /*hex_7seg:
                 	lsr r18							;shift lsb to carry
                 	dec r19							;decrement r19 for 4 times
                 	BRNE hex_7seg					;after shifting 4 digits go to bcd_7seg
                 */
                 //display the duty cycle value
                 hex_7seg:
00002a 2f12      	mov r17, r18					;copy r18 to r17
00002b e0f0      	ldi ZH, HIGH(table*2)
00002c e6e6      	ldi ZL, LOW(table*2)			;set z to point to start of the table
00002d e000      	ldi r16, $00					;clear for later use
00002e 0fe1      	add ZL, r17						;add low byte
00002f 1ff0      	adc ZH, r16						;add in the carry
000030 9114      	lpm r17, z						;load bid pattern from table into r18
                 display:
000031 bb18      	out PORTB,r17					;output patter for 7 seg display
000032 9508      	ret
000033 7940
000034 3024
000035 1219
000036 7803
000037 1800      table: .db $40, $79, $24, $30, $19, $12, $03, $78,$0, $18
                 		//	0	 1	   2   3    4     5    6    7  8   9
                 
                 
                 //output 0 in the signal
                 clear:
000038 98d8      	CBI PORTA, 0					;set port a to 0
000039 e400      	LDI r16, $40					;load register 16 with 0's 
00003a bb08      	OUT PORTB, r16					;output 0 on 7seg
00003b cfd4      	rjmp main_loop
                 frequency:
                 //	ldi r16, $f						;load r16 with 1's
00003c 7f90      	andi r25, $F0					;obtain only the 4 msb
                 	;ldi r16, 100					;load r16 with 100
                 	;sub r25, r16					;subtract r25 from 16 
                 //	mov r25, r16					;move r16 to r25	
00003d 9590      	com r25	
00003e 9508      	ret	
                 //	ldi r16, 6						;load r16 with 6
                 //	mul r25, r16					;multiply r25 with 6
                 //	ldi r25, 100					;load 100
                 //	sub r25, r0						;subtract r0 from 100
                 //	ldi r16, 60
                 //	mul r25, r16					;multiple r25 with 100
                 //	ldi r16, 1000
                 //	sub r25, r16					;subtract r25 from 1000
                 			
                 
                 
                 //turn on the signal for the switch value
                 	
                 delay_on:
                 ;	mov r20, r25					;load r20 with values of r25
                 //	ldi r20, 100					;load r20 with 100
                 ;	mov r21, r18					;load r21 with switch values
00003f 2f42      	mov r20, r18
                 	outer2:
000040 2f59      	mov r21, r25
                 	inner2:
000041 955a      	dec r21
000042 f7f1      	brne inner2
000043 954a      	dec r20
000044 f7d9      	brne outer2
000045 9508      	ret
                 	;rjmp inner_loop					;delay for r18*100 cycles
                 
                 //turn off the signal for 10 minus switch value
                 delay_off:
                 ;	mov r20, r25					;load r20 with value of r25
                 //	ldi r20, 100					;load r20 with 100
000046 e05a      	ldi r21, 10						;load r21 with 10
                 ;	sub r21, r18					;subract 10 - switch values
000047 2f42      	mov r20, r18
000048 1b54      	sub r21, r20
000049 2f45      	mov r20, r21
                 	outer1:
00004a 2f59      	mov r21, r25
                 	inner1:
00004b 955a      	dec r21
00004c f7f1      	brne inner1
00004d 954a      	dec r20
00004e f7d9      	brne outer1
00004f 9508      	ret
                 	;rjmp inner_loop					;delay for r21*100 cycles
                 
                 //delay for 10 ms
                 delay:
000050 e04d      	ldi r20, inner					;set r20 to 240
000051 ef51      	ldi r21, outer					;set r21 to 13
                 inner_loop:
000052 954a      	dec r20							;decrements 240
000053 f7f1      	brne inner_loop					;repeat until r20 is 0
                 outer_loop:
000054 e04d      	ldi r20, inner					;reset the r20 to 240
000055 955a      	dec r21							;decrement for 13 cycles
000056 f7d9      	brne inner_loop					;repeat until r21 is 0 
000057 ef51      	ldi r21, outer					;reset r21 for next delay


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  22 r17:   4 r18:   8 r19:   0 r20:   9 r21:  10 r22:   0 r23:   0 
r24:   0 r25:   5 r26:   0 r27:   0 r28:   0 r29:   0 r30:   2 r31:   2 
x  :   0 y  :   0 z  :   1 
Registers used: 9 out of 35 (25.7%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   0 
andi  :   2 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :   1 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   6 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   2 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   1 cp    :   0 cpc   :   0 
cpi   :   1 cpse  :   0 dec   :   6 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   1 inc   :   0 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  17 lds   :   0 lpm   :   2 lsl   :   0 
lsr   :   0 mov   :   7 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  11 pop   :   0 
push  :   0 rcall :   5 ret   :   5 reti  :   0 rjmp  :   8 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   1 sbic  :   1 sbis  :   3 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   1 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 22 out of 113 (19.5%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0000b2    168     10    178   16384   1.1%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
