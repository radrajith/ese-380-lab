
AVRASM ver. 2.1.52  H:\New folder\cond_trans_srff\cond_trans_srff\cond_trans_srff.asm Wed Oct 15 10:23:04 2014

H:\New folder\cond_trans_srff\cond_trans_srff\cond_trans_srff.asm(24): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.1005\avrassembler\Include\m16def.inc'
                 
                 
                  * cond_trans_select_srff.asm
                  *
                  ; This program is a modification of the second program and
                  ; will utilize 2 pbsw, pbsw 3 will used with the d_ff and act
                  ; as select and Pbsw2(pc6) will be used as load. When the load 
                  ; press is recognized a 1 will be outputted to PA6 to reset the 
                  ; input going into PA7. Thus acting as a srff. Two leds will 
                  ; be attached to PA0 and PA1. PA0 led will be turned on when the 
                  ; lower nibble dip switch is used, and PA1 led for the other. 
                  ; select pbsw will alternate between lower and upper dip switch
                  ; for each press. load will load the input values of the selected
                  ; dip switch.
                  ;
                  ;inputs : dip switch (Port D), PBSW 3 and 2(PC7,PC6)
                  ;outputs: 7seg display (Port B), led 1 and 2(PA0,PA1), 
                  ;			r18 used for porta output
                  ;			r17 used to store and output dip switch input
                 
                  *  Created: 10/9/2014 10:53:35 AM
                  *   Author: raymond ng
                  */ 
                  .list
                 
                 reset:
                 	//initizling the stack pointer
000000 e50f      	ldi r16, LOW(RAMEND)			;load SPL with low byte of
000001 bf0d      	out SPL, r16					;RAMEND adress
000002 e004      	ldi r16, HIGH(RAMEND)			;load SPH with low byte of 
000003 bf0e      	out SPH, r16					;RAMEND adress
000004 ef0f      	ldi r16, $FF					;load r16 with 1's and
000005 bb07      	out ddrb, r16					;make portb as output
000006 bb0a      	out ddra, r16					;port a as output 
000007 bb02      	out portd, r16					;turn on pull up resistors in portd
000008 9aa8      	sbi portc, 0					;turn on pull up resistors in PC0
000009 9aae      	sbi portc, 6					;turn on pull ups in pc6
00000a e000      	ldi r16, $00					;load r16 with 0's
00000b bb01      	out ddrd, r16					;set portd and
00000c bb04      	out ddrc, r16					;port c as inputs
00000d e010      	ldi r17, $00					;load r17 with 0's
00000e e021      	ldi r18, $01					;load r18 with 0's
00000f e30f      	ldi r16, $3F					;output "-" in 7seg 
000010 bb08      	out portb, r16					;indicating no input
000011 e001      	ldi r16, $01
000012 bb0b      	out porta, r16
                 main_loop:
000013 b310      	in r17, pind					;input values of dip switch	
000014 99cf      	sbic pina, 7					;wait for load button press
000015 c00b      	rjmp LOAD_push					;check for other push button
000016 d023      	rcall delay						;jump
000017 9b9f      	sbis pinc,7						;back to
000018 c004      	rjmp clear					    ;main loop if false
                 	.
000019 e003      	ldi r16, $03					;set 00000011
00001a b32b      	in r18, porta					;take porta values
00001b 2720      	eor r18, r16					;toggle first two bits
00001c bb2b      	out porta, r18					;turn on the led 1 or 2;
                 	clear:
00001d 9ace      	sbi pina, 6						;generate pulse 
00001e 98ce      	cbi pina, 6						;to clear register
                 	wait_0:
00001f 999f      	sbic pinc,7
000020 cffe      	rjmp wait_0
                 LOAD_push:
000021 999e      	sbic pinc, 6					;check for load
000022 cff0      	rjmp main_loop					;pushbutton
000023 9bc8      	sbis pina, 0					;dont swap if the first bit is selected
000024 9512      	swap r17						;swap nibbles
000025 701f      	andi r17, $0F					;force upper values to 0
000026 e036      	ldi r19, $06					;if it is
000027 0f31      	add r19,r17					    ;then
000028 f00d      	brhs overflow					;go to overflow
000029 c001      	rjmp hex_7seg					;if not then display
                 overflow:
00002a e019      	ldi r17, $09					;set max value possible with is 9
                 hex_7seg:
                 	//mov r17, r18					;copy r18 to r17
00002b e0f0      	ldi ZH, HIGH(table*2)
00002c e6ea      	ldi ZL, LOW(table*2)			;set z to point to start of the table
00002d e000      	ldi r16, $00					;clear for later use
00002e 0fe1      	add ZL, r17						;add low byte
00002f 1ff0      	adc ZH, r16						;add in the carry
000030 9114      	lpm r17, z						;load bid pattern from table into r18
                 display:
000031 bb18      	out PORTB,r17					;output pattern for 7 seg display
                 	wait_1:
000032 9b9e      	sbis pinc, 6
000033 cffe      	rjmp wait_1
000034 cfde      	rjmp main_loop
000035 7940
000036 3024
000037 1219
000038 7803
000039 1800      table: .db $40, $79, $24, $30, $19, $12, $03, $78, $0, $18
                 		//	0	 1	   2   3    4    5    6    7    8   9
                 /*
                 ;	Delay:
                 ;		This subroutine will utilize variables r16, and r17.
                 ;		The variabled will be initialized to act as counters
                 ;		to count a 10 ms delay
                 ;		r17: 100, r16: 33
                 */
                 
                 
                 delay:
00003a 931f      	push r17						;push aside the registers
00003b 930f      	push r16						;r16 and r17 
00003c e201      	ldi r16, 33						;loop through 33 times
                 	outer:
00003d e614      	ldi r17, 100					;of 100 decrements
                 	inner:
00003e 951a      	dec r17
00003f f7f1      	brne inner
000040 950a      	dec r16
000041 f7d9      	brne outer	
000042 910f      	pop r16							;pop the registers back
000043 911f      	pop r17	


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  23 r17:  13 r18:   4 r19:   2 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   0 r25:   0 r26:   0 r27:   0 r28:   0 r29:   0 r30:   2 r31:   2 
x  :   0 y  :   0 z  :   1 
Registers used: 7 out of 35 (20.0%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   1 add   :   2 adiw  :   0 and   :   0 
andi  :   1 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   0 brge  :   0 brhc  :   0 
brhs  :   1 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :   2 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   1 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   0 dec   :   2 eor   :   1 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 inc   :   0 jmp   :   0 
ld    :   0 ldd   :   0 ldi   :  16 lds   :   0 lpm   :   2 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  11 pop   :   2 
push  :   2 rcall :   1 ret   :   1 reti  :   0 rjmp  :   7 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   3 sbic  :   3 sbis  :   3 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   1 tst   :   0 wdr   :   0 
Instructions used: 21 out of 113 (18.6%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00008a    128     10    138   16384   0.8%
[.dseg] 0x000060 0x000060      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
