
AVRASM ver. 2.1.52  C:\Users\radra_000\Box Sync\college sophomore fall 2014\fall 2014 notes and files\ese 380 lab\lab 7\7_code1_rajith\7_code1_rajith\dog_lcd_diag_two(1).asm Sun Oct 19 11:45:28 2014

C:\Users\radra_000\Box Sync\college sophomore fall 2014\fall 2014 notes and files\ese 380 lab\lab 7\7_code1_rajith\7_code1_rajith\dog_lcd_diag_two(1).asm(17): Including file 'C:\Program Files (x86)\Atmel\Atmel Toolchain\AVR Assembler\Native\2.1.39.1005\avrassembler\Include\m16def.inc'
C:\Users\radra_000\Box Sync\college sophomore fall 2014\fall 2014 notes and files\ese 380 lab\lab 7\7_code1_rajith\7_code1_rajith\dog_lcd_diag_two(1).asm(30): Including file 'C:\Users\radra_000\Box Sync\college sophomore fall 2014\fall 2014 notes and files\ese 380 lab\lab 7\7_code1_rajith\7_code1_rajith\lcd_dog_asm_driver_m16A.inc'
                 
                 
                 ;*****************************************************************
                 ;**********     BASIC DOG LCD DIAGNOSTIC TWO            **********
                 ;*****************************************************************
                 ;
                 ; dog_lcd_diag_two.asm
                 ;
                 ;   Another simple diagnostic that writes all three lines, blanks
                 ;     the display, and then writes all three lines again. This 
                 ;     diagnostic also shows a subset of ascii symbols available
                 ;     for use with this display module
                 ;
                 ; Version - 1.2a
                 ;
                 
                 .list
                 
                      .CSEG
                 
                      ; interrupt vector table, with several 'safety' stubs
000000 c0a2           rjmp RESET      ;Reset/Cold start vector
000001 9518           reti            ;External Intr0 vector
000002 9518           reti            ;External Intr1 vector
                 	 
                 ;---------------------------- SUBROUTINES ----------------------------
                 
                 ;====================================
                 .include "lcd_dog_asm_driver_m16A.inc"  ; LCD DOG init/update procedures.
                 
                 ;modified 11/26/12 KLS
                 ; lcd_spi_transmit_data and lcd_spi_transmit_CMD handling of SPIF flag
                 ;
                 ;modifued 07/21/14 FST
                 ; added BLOCK comments for adjusting power_ctrl & contrast_set parameters
                 ;
                 
                 
                 ;************************************************************************ 
                 ;   ATMega16A  2015 Version                           PRINT IN LANDSCAPE                     
                 ;   
                 ;   This AVR-asm code module is usable as an include file for assembly
                 ;   language and or mixed asm/C application programs. The code is freely 
                 ;   usable by any University of Stonybrook undergraduate students for any
                 ;   and all not-for-profit system designs and or implementations.
                 ;
                 ;   This code is designed to be executed on an AVR ATMega micro-computer.
                 ;   And may be readily adapted for compatibility with IAR/AVR compilers. 
                 ;   See the IAR assembler reference guide for more information by 
                 ;   clicking 'Help > AVR Assembly Reference Guide" on the above menus.
                 ;
                 ;
                 ;************************************************************************
                 ;
                 ;   This module contains procedures to initialize and update
                 ;   DOG text based LCD display modules, including the EA DOG163M LCD
                 ;   modules configured with three (3) 16 charactors display lines.
                 ;
                 ;   The display module hardware interface uses a 1-direction, write only
                 ;   SPI interface. (See below for more information.)
                 ;
                 ;   The display module software interface uses three (3) 16-byte
                 ;   data (RAM) based display buffers - One for each line of the display.
                 ;   (See below for more information.)
                 ;
                 ;*********************************************************************
                 ;
                 ;   *** Port B Interface Definitions:
                 ;
                 ;  Port B             PB7   PB6   PB5   PB4   PB3   PB2   PB1   PB0
                 ;  Port B alt names   SCK   MISO  MOSI  /SS   /RS    -     -     -
                 ;  LCD Mod Signal     D6     -     D7   /CSB   -     -     -     -
                 ;  LCD Mod Pin #      29     -     28    38    -     -     -     -
                 ;
                 ;  Notes: RS ==>  0 = command regs, 1 = data regs
                 ;         /SS = active low SPI select signal
                 ;
                 ;******************
                 
                 
                 ;***  DATA Segment  **************************************************   
                 .DSEG
000060           dsp_buff_1:   .byte 16
000070           dsp_buff_2:   .byte 16
000080           dsp_buff_3:   .byte 16
                 
                 
                 
                 
                 ;***  CODE Segment Subroutines  ************************************
                 .CSEG
                 
                 
                 
                 ;************************
                 ;NAME:        delay_30uS
                 ;ASSUMES:     nothing
                 ;RETURNS:     nothing
                 ;MODIFIES:    R24, SREG
                 ;CALLED BY:   init_dsp
                 ;DESCRIPTION: This procedure will generate a fixed delay of just over
                 ;             30 uS (assuming a 1 MHz clock).
                 ;********************************************************************
000003 0000      delay_30uS:   nop     ; fine tune delay
000004 0000                    nop
000005 938f                    push  r24
000006 e08f                    ldi   r24, 0x0f  ; load delay count.
000007 958a      d30_loop:     dec   r24        ; count down to
000008 f7f1                    brne  d30_loop   ; zero.
000009 918f                    pop   r24
00000a 9508                    ret
                 
                 
                 
                 ;*********************
                 ;NAME:        v_delay
                 ;ASSUMES:     R22, R23 = initial count values defining how many
                 ;             30uS delays will be called. This procedure can generate
                 ;             short delays (r23 = small #) or much longer delays (where
                 ;             R23 value is large).
                 ;RETURNS:     nothing
                 ;MODIFIES:    R22, R23, SREG
                 ;CALLED BY:   init_dsp, plus...
                 ;DESCRIPTION: This procedure will generate a variable delay for a fixed
                 ;             period of time based the values pasted in R24 and R25.
                 ;
                 ;Sample Delays:
                 ;
                 ;             R22  R23  DelayTime
                 ;             ---  ---  ---------
                 ;              1    1   ~65.5 uS
                 ;              0    1   ~14.2 mS
                 ;              0    9   ~130 mS
                 ;**********************************************************************
00000b dff7      v_delay:      rcall delay_30uS ; delay for ~30uS
00000c 956a                    dec   r22      ; decrement inner loop value, and
00000d f7e9                    brne  v_delay  ; loop until zero.
00000e 957a                    dec   r23      ; decr outer loop count, and loop back
00000f f7d9                    brne  v_delay  ; to inner loop delay until r23 zero.
000010 9508                    ret
                 
                 
                 
                 
                 ;***********************
                 ;NAME:        delay_40mS
                 ;ASSUMES:     nothing
                 ;RETURNS:     nothing
                 ;MODIFIES:    R22,R23, SREG
                 ;CALLED BY:   init_dsp, ????
                 ;DESCRIPTION: This procedure will generate a fixed delay of just over
                 ;             40 mS.
                 ;********************************************************************
000011 e060      delay_40mS:   ldi   r22,0        ; load inner loop var
000012 e074                    ldi   r23,4        ; load outer loop var
000013 dff7                    rcall  v_delay     ; delay
000014 9508                    ret
                 
                 
                 
                 
                 ;************************
                 ;NAME:       init_spi_lcd
                 ;ASSUMES:    IMPORTANT: PortB set as output (during program init)
                 ;RETURNS:    nothing
                 ;MODIFIES:   DDRB, SPCR
                 ;CALLED BY:  init_dsp, update
                 ;DESCRITION: init SPI port for command and data writes to LCD via SPI
                 ;********************************************************************
                 init_spi_lcd:
000015 930f            push r16
000016 e50c            ldi r16,(1<<SPE) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA)
000017 b90d            out SPCR,r16   ; Enable SPI, Master, fck/4, 
                       
                       ;kill any spurious data...
000018 b10e            in r16, SPSR   ; clear SPIF bit in SPSR
000019 b10f            in r16, SPDR   ;
00001a 910f            pop r16        ; restore r16 value...
00001b 9508            ret
                 
                 
                 
                 ;********************************
                 ;NAME:       lcd_spi_transmit_CMD
                 ;ASSUMES:    r16 = byte for LCD.
                 ;            SPI port is configured.
                 ;RETURNS:    nothing
                 ;MODIFIES:   R16, PortB, SPCR
                 ;CALLED BY:  init_dsp, update
                 ;DESCRITION: outputs a byte passed in r16 via SPI port. Waits for data
                 ;            to be written by spi port before continuing.
                 ;*********************************************************************
                 lcd_spi_transmit_CMD:
00001c 930f           push r16          ; save command, need r16.
00001d 98c3           cbi   portB, 3    ; clr PB1 = RS = 0 = command.
00001e 98c4           cbi   portB, 4    ; clr PB2 = /SS = selected.
00001f b10e              in r16, SPSR   ; clear SPIF bit in SPSR.
000020 b10f              in r16, SPDR   ;
000021 910f           pop r16           ; restore command
000022 b90f           out SPDR,r16      ; write data to SPI port.
                 
                 
                      ;Wait for transmission complete
                 wait_transmit:
000023 b10e           in r16, SPSR     ; read status reg
000024 ff07           sbrs r16, SPIF   ; if bit 7  = 0 wait
000025 cffd           rjmp wait_transmit
000026 b10f      	 in r16, SPDR		;added by Ken to clear SPIF
000027 9ac4           sbi   portB, 4   ; set PB2 = /SS = deselected
000028 9508           ret
                 
                 
                 
                 
                 ;*********************************
                 ;NAME:       lcd_spi_transmit_DATA
                 ;ASSUMES:    r16 = byte to transmit to LCD.
                 ;            SPI port is configured.
                 ;RETURNS:    nothing
                 ;MODIFIES:   R16, SPCR
                 ;CALLED BY:  init_dsp, update
                 ;DESCRITION: outputs a byte passed in r16 via SPI port. Waits for
                 ;            data to be written by spi port before continuing.
                 ;*****************************************************************
                 lcd_spi_transmit_DATA:
000029 930f           push r16          ; save command, need r16.
00002a 9ac3           sbi   portB, 3    ; clr PB1 = RS = 1 = data.
00002b 98c4           cbi   portB, 4    ; clr PB2 = /SS = selected.
00002c b10e              in r16, SPSR   ; clear SPIF bit in SPSR.
00002d b10f              in r16, SPDR   ;
00002e 910f           pop r16           ; restore command.
00002f b90f           out SPDR,r16      ; write data to SPI port.
                 
                 
                      ;Wait for transmission complete
                 wait_transmit1:
000030 b10e           in r16, SPSR     ; read status reg
000031 ff07           sbrs r16, SPIF   ; if bit 7  = 0 wait
000032 cffd           rjmp wait_transmit1
000033 b10f      	 in r16, SPDR		;clear SPIF (because it follows in r16,SPSR)
000034 9ac4           sbi   portB, 4   ; set PB2 = /SS = deselected
000035 9508           ret
                 
                 
                 
                 ;************************
                 ;NAME:       init_lcd_dog
                 ;ASSUMES:    nothing
                 ;RETURNS:    nothing
                 ;MODIFIES:   R16, R17
                 ;CALLED BY:  main application
                 ;DESCRITION: inits DOG module LCD display for SPI (serial) operation.
                 ;NOTE:  Can be used as is with MCU clock speeds of 4MHz or less.
                 ;********************************************************************
                 ; public __version_1 void init_dsp(void)
                 init_lcd_dog:
000036 dfde             rcall init_spi_lcd   ; init SPI port for DOG LCD.
                 
                 
                 start_dly_40ms:
000037 dfd9             rcall  delay_40mS    ; startup delay.
                 
                 
                 func_set1:
000038 e309             ldi    r16,0x39      ; send fuction set #1
000039 dfe2             rcall  lcd_spi_transmit_CMD   ;
00003a dfc8             rcall  delay_30uS    ; delay for command to be processed
                 
                 
                 func_set2:
00003b e309             ldi    r16,0x39      ; send fuction set #2
00003c dfdf             rcall  lcd_spi_transmit_CMD
00003d dfc5             rcall  delay_30uS    ; delay for command to be processed
                 
                 
                 bias_set:
00003e e10e             ldi    r16,0x1E      ; set bias value.
00003f dfdc             rcall  lcd_spi_transmit_CMD
000040 dfc2             rcall  delay_30uS    ;
                 
                 
                                                    ; =============================================
                                                    ; === CALIBRATION PARAMETER - USER ADJUSTABLE
                 power_ctrl:                        ; === (CAUTION... VERY DELICATE ADJUSTMENT)
000041 e500             ldi    r16,0x50             ; === 5V ~= 0x50 nominal;      Adjust by 1 ONLY
000042 dfd9             rcall  lcd_spi_transmit_CMD ; === 3.3V ~= 0x55 nominal     and think hex!
000043 dfbf             rcall  delay_30uS           ;   Hex = 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f
                                                    ; ==========================================
                 
                 follower_ctrl:
000044 e60c             ldi    r16,0x6C      ; follower mode on... 
000045 dfd6             rcall  lcd_spi_transmit_CMD
000046 dfca             rcall  delay_40mS    ;
                                                    ; ============================================
                                                    ; === CALIBRATION PARAMETER - USER ADJUSTABLE
                 contrast_set:                      ; === LCD CONTRAST SETTING ADJUSTMENT
000047 e707             ldi    r16,0x77             ; === 
000048 dfd3             rcall  lcd_spi_transmit_CMD ; === Delicate: increases for 3.3V vs 5V
000049 dfb9             rcall  delay_30uS           ; ========================================= 
                 
                 display_on:
00004a e00c             ldi    r16,0x0c      ; display on, cursor off, blink off
00004b dfd0             rcall  lcd_spi_transmit_CMD
00004c dfb6             rcall  delay_30uS    ; 
                 
                 
                 clr_display:
00004d e001             ldi    r16,0x01      ; clear display, cursor home
00004e dfcd             rcall  lcd_spi_transmit_CMD
                 
                 
00004f dfb3             rcall  delay_30uS    ;
                 
                 
                 entry_mode:
000050 e006             ldi    r16,0x06      ; clear display, cursor home
000051 dfca             rcall  lcd_spi_transmit_CMD;
000052 dfb0             rcall  delay_30uS    ;
000053 9508             ret
                 
                 
                 
                 
                 ;**************************
                 ;NAME:       update_lcd_dog
                 ;ASSUMES:    display buffers loaded with display data
                 ;RETURNS:    nothing
                 ;MODIFIES:   R16,R20,R30,R31,SREG
                 ;
                 ;DESCRITION: Updates the LCD display lines 1, 2, and 3, using the
                 ;  contents of dsp_buff_1, dsp_buff_2, and dsp_buff_3, respectively.
                 ;*******************************************************************
                 ; public __version_1 void update_dsp_dog (void)
                 update_lcd_dog:
000054 dfc0             rcall init_spi_lcd    ; init SPI port for LCD.
000055 e140             ldi   r20,16          ; init 'chars per line' counter.
000056 934f             push  r20             ; save for later used.
                 
                 
                        ;send line 1 to the LCD module.
                 wr_line1:     
000057 e0f0             ldi   ZH, high (dsp_buff_1)  ; init ptr to line 1 display buffer.
000058 e6e0             ldi   ZL, low (dsp_buff_1)   ;
                 snd_ddram_addr:
000059 e800             ldi   r16,0x80             ; init DDRAM addr-ctr 
00005a dfc1             rcall lcd_spi_transmit_CMD ; 
00005b dfa7             rcall delay_30uS
                 snd_buff_1:
00005c 9101             ld    r16, Z+
00005d dfcb             rcall lcd_spi_transmit_DATA
00005e dfa4             rcall delay_30uS
00005f 954a             dec   r20
000060 f7d9             brne  snd_buff_1
                 
                 
                        ;send line 2 to the LCD module.
                 init_for_buff_2:
000061 914f             pop   r20     ; reload r20 = chars per line counter
000062 934f             push  r20     ; save for line 3
                 wr_line2:
000063 e0f0             ldi   ZH, high (dsp_buff_2)  ; init ptr to line 2 display buffer.
000064 e7e0             ldi   ZL, low (dsp_buff_2)
                 snd_ddram_addr2:
000065 e900             ldi   r16,0x90               ; init DDRAM addr-ctr 
000066 dfb5             rcall lcd_spi_transmit_CMD           ;  
000067 df9b             rcall delay_30uS
                 snd_buff_2:
000068 9101             ld    r16, Z+
000069 dfbf             rcall lcd_spi_transmit_DATA
00006a df98             rcall delay_30uS
00006b 954a             dec   r20
00006c f7d9             brne  snd_buff_2
                 
                 
                        ;send line 3 to the LCD module.
                 init_for_buff_3:
00006d 914f             pop   r20     ; reload r20 = chars per line counter
                 wr_line3:
00006e e0f0             ldi   ZH, high (dsp_buff_3)  ; init ptr to line 2 display buffer.
00006f e8e0             ldi   ZL, low (dsp_buff_3)
                 snd_ddram_addr3:
000070 ea00             ldi   r16,0xA0               ; init DDRAM addr-ctr 
000071 dfaa             rcall lcd_spi_transmit_CMD           ;  
000072 df90             rcall delay_30uS
                 
                 
                 snd_buff_3:
000073 9101             ld    r16, Z+
000074 dfb4             rcall lcd_spi_transmit_DATA
000075 df8d             rcall delay_30uS
000076 954a             dec   r20
000077 f7d9             brne  snd_buff_3
000078 9508             ret
                 
                 
                 ;******* End Of LCD DOG Include Module *********************************
                 ;====================================
                 
                 ;************************
                 ;NAME:      clr_dsp_buffs
                 ;FUNCTION:  Initializes dsp_buffers 1, 2, and 3 with blanks (0x20)
                 ;ASSUMES:   Three CONTIGUOUS 16-byte dram based buffers named
                 ;           dsp_buff_1, dsp_buff_2, dsp_buff_3.
                 ;RETURNS:   nothing.
                 ;MODIFIES:  r25,r26, Z-ptr
                 ;CALLS:     none
                 ;CALLED BY: main application and diagnostics
                 ;********************************************************************
                 clr_dsp_buffs:
000079 e390           ldi R25, 48               ; load total length of both buffer.
00007a e2a0           ldi R26, ' '              ; load blank/space into R26.
00007b e0f0           ldi ZH, high (dsp_buff_1) ; Load ZH and ZL as a pointer to 1st
00007c e6e0           ldi ZL, low (dsp_buff_1)  ; byte of buffer for line 1.
                    
                     ;set DDRAM address to 1st position of first line.
                 store_bytes:
00007d 93a1           st  Z+, R26       ; store ' ' into 1st/next buffer byte and
                                        ; auto inc ptr to next location.
00007e 959a           dec  R25          ; 
00007f f7e9           brne store_bytes  ; cont until r25=0, all bytes written.
000080 9508           ret
                 
                 
                 ;*******************
                 ;NAME:      load_msg
                 ;FUNCTION:  Loads a predefined string msg into a specified diplay
                 ;           buffer.
                 ;ASSUMES:   Z = offset of message to be loaded. Msg format is 
                 ;           defined below.
                 ;RETURNS:   nothing.
                 ;MODIFIES:  r16, Y, Z
                 ;CALLS:     nothing
                 ;CALLED BY:  
                 ;********************************************************************
                 ; Message structure:
                 ;   label:  .db <buff num>, <text string/message>, <end of string>
                 ;
                 ; Message examples (also see Messages at the end of this file/module):
                 ;   msg_1: .db 1,"First Message ", 0   ; loads msg into buff 1, eom=0
                 ;   msg_2: .db 1,"Another message ", 0 ; loads msg into buff 1, eom=0
                 ;
                 ; Notes: 
                 ;   a) The 1st number indicates which buffer to load (either 1, 2, or 3).
                 ;   b) The last number (zero) is an 'end of string' indicator.
                 ;   c) Y = ptr to disp_buffer
                 ;      Z = ptr to message (passed to subroutine)
                 ;********************************************************************
                 load_msg:
000081 e0d0           ldi YH, high (dsp_buff_1) ; Load YH and YL as a pointer to 1st
000082 e6c0           ldi YL, low (dsp_buff_1)  ; byte of dsp_buff_1 (Note - assuming 
                                                ; (dsp_buff_1 for now).
000083 9105           lpm R16, Z+               ; get dsply buff number (1st byte of msg).
000084 3001           cpi r16, 1                ; if equal to '1', ptr already setup.
000085 f021           breq get_msg_byte         ; jump and start message load.
000086 9660           adiw YH:YL, 16		         ; else set ptr to dsp buff 2.
000087 3002           cpi r16, 2                ; if equal to '2', ptr now setup.
000088 f009           breq get_msg_byte         ; jump and start message load.
000089 9660           adiw YH:YL, 16            ; else set ptr to dsp buff 2.
                         
                 get_msg_byte:
00008a 9105           lpm R16, Z+               ; get next byte of msg and see if '0'.        
00008b 3000           cpi R16, 0                ; if equal to '0', end of message reached.
00008c f011           breq msg_loaded           ; jump and stop message loading operation.
00008d 9309           st Y+, R16                ; else, store next byte of msg in buffer.
00008e cffb           rjmp get_msg_byte         ; jump back and continue...
                 msg_loaded:
00008f 9508           ret
                 
                 ;*****************
                 ;NAME:      tone_5V
                 ;FUNCTION:  causes tone/beep on piezo element
                 ;ASSUMES:   nothing
                 ;RETURNS:   nothing
                 ;MODIFIES:  SREG
                 ;CALLS:     v_delay
                 ;*********************************************************************
                 tone_5V:
000090 937f            push  r23   ; save registers
000091 936f            push  r22
000092 930f            push  r16
                 
                    ;***************************************************
                    ;SOUNDER TONE/DURATION - ADJUSTABLE VALUE
                    ;(May be adjusted by user, as needed)
000093 e00c          ldi   r16, 12     ; CALIBRATION PARAMETER
                    ;SOUNDER TONE/DURATION ADJUSTMENT
                    ;***************************************************
000094 e064            ldi  r22, 0x04  ; inner delay count.
000095 e071            ldi  r23, 1     ; outer delay count.
                 tone_loop:
000096 936f            push r22        ; save counts in r22 and r23
000097 937f            push r23        ;
000098 98a8            cbi  PortC,0    ; turn on sounder
000099 df71            rcall v_delay   ; delay
00009a 9aa8            sbi  PortC,0    ; turn off sounder
00009b 917f            pop r23         ; restore delay count
00009c 916f            pop r22         ; down registers
00009d 950a            dec r16         ; adjust loop ctr, and if not
00009e f7b9            brne tone_loop  ; zero, then branch and repeat.
                 
00009f 910f            pop  r16   ; restore registers
0000a0 916f            pop  r22
0000a1 917f            pop  r23
0000a2 9508            ret
                 
                 
                 ;**********************************************************************
                 ;************* M A I N   A P P L I C A T I O N   C O D E  *************
                 ;**********************************************************************
                 
                 RESET:
0000a3 e50f          ldi r16, low(RAMEND)  ; init stack/pointer
0000a4 bf0d          out SPL, r16          ;
0000a5 e004          ldi r16, high(RAMEND) ;
0000a6 bf0e          out SPH, r16
                 	
0000a7 ef0f          ldi r16, 0xff     ; set portB = output.
0000a8 bb07          out DDRB, r16     ; 
0000a9 9ac4          sbi portB, 4      ; set /SS of DOG LCD = 1 (Deselected)
                 	
0000aa e001      	ldi r16, 1        ; set DDRC for all bits = 
0000ab bb04      	out DDRC, r16     ; input, but PC0... PC0=output
0000ac 9aa8      	sbi PortC, 0      ; turn off sounder
                 
0000ad df88          rcall init_lcd_dog    ; init display, using SPI serial interface
0000ae dfe1          rcall tone_5V
                 
                 
                 message_dsp_loop:
0000af dfc9         rcall clr_dsp_buffs   ; clear all three buffer lines
0000b0 dfa3         rcall update_lcd_dog  ;
                    
0000b1 e055         ldi  r21, 0x5         ; delay for ~ 1/5 second
                 msg_delay:
0000b2 df5e         rcall delay_40mS
0000b3 955a         dec  r21
0000b4 f7e9         brne msg_delay
                         
                    ;load_line_1 into dbuff1:
0000b5 e0f1         ldi  ZH, high(line1_testmessage<<1)  ;
0000b6 e8e8         ldi  ZL, low(line1_testmessage<<1)   ;
0000b7 dfc9         rcall load_msg          ; load message into buffer(s).
                    
0000b8 e0f1         ldi  ZH, high(line2_testmessage<<1)  ;
0000b9 e9ea         ldi  ZL, low(line2_testmessage<<1)   
0000ba dfc6         rcall load_msg          ; load message into buffer(s).
                    
0000bb e0f1         ldi  ZH, high(line3_testmessage<<1)  ;
0000bc eaec         ldi  ZL, low(line3_testmessage<<1)   ;
0000bd dfc3         rcall load_msg          ; load message into buffer(s).
                    
0000be df95         rcall update_lcd_dog
                 
0000bf e05f         ldi  r21, 0xf       ; delay for ~ 1/2 second
                 msg_delay2:
0000c0 df50         rcall delay_40mS
0000c1 955a         dec  r21
0000c2 f7e9         brne msg_delay2
0000c3 cfeb         rjmp  message_dsp_loop
                 
                 
                 
                 
                 ;*************************************************************************
                 ;*** FIXED TEXT LINES: All are16 chars in long, with varying ascii symbols
                 ;*************************************************************************
                 
0000c4 3001
0000c5 3231
0000c6 3433
0000c7 3635
0000c8 3837
0000c9 4139
0000ca 4342
0000cb 4544
0000cc 0046      line1_testmessage: .db 1, "0123456789ABCDEF", 0  ; test string for line #1.
0000cd 2f02
0000ce 5246
0000cf 5145
0000d0 3d20
0000d1 2020
0000d2 2020
0000d3 2020
0000d4 2020
0000d5 0020      line2_testmessage: .db 2, "/FREQ =         ",0		 ;  test string for line #2.
0000d6 6103
0000d7 6362
0000d8 6564
0000d9 6766
0000da 6968
0000db 6b6a
0000dc 6d6c
0000dd 6f6e
0000de 0070      line3_testmessage: .db 3, "abcdefghijklmnop", 0  ; test string for line #3.
                 
                 ;***** END OF FILE ******
                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega16" register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  55 r17:   0 r18:   0 r19:   0 r20:   8 r21:   4 r22:   7 r23:   7 
r24:   4 r25:   2 r26:   2 r27:   0 r28:   3 r29:   3 r30:   7 r31:   7 
x  :   0 y  :   1 z  :   6 
Registers used: 14 out of 35 (40.0%)

"ATmega16" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   2 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   3 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   4 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   0 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   3 cpse  :   0 dec   :  10 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  10 inc   :   0 jmp   :   0 
ld    :   3 ldd   :   0 ldi   :  44 lds   :   0 lpm   :   2 lsl   :   0 
lsr   :   0 mov   :   0 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   0 ori   :   0 out   :   7 pop   :  11 
push  :  11 rcall :  46 ret   :  11 reti  :   2 rjmp  :   5 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   6 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   2 std   :   0 sts   :   0 
sub   :   0 subi  :   0 swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 21 out of 113 (18.6%)

"ATmega16" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0001be    392     54    446   16384   2.7%
[.dseg] 0x000060 0x000090      0     48     48    1024   4.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
